// automatically generated by the FlatBuffers compiler, do not modify

package io.objectbox.model;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * There could be multiple schemas (one dbi per schema)
 */
public final class Model extends Table {
  public static Model getRootAsModel(ByteBuffer _bb) { return getRootAsModel(_bb, new Model()); }
  public static Model getRootAsModel(ByteBuffer _bb, Model obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Model __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  /**
   * currently always "default"
   */
  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  /**
   * User controlled version
   */
  public long version() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public ModelEntity entities(int j) { return entities(new ModelEntity(), j); }
  public ModelEntity entities(ModelEntity obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int entitiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createModel(FlatBufferBuilder builder,
      int nameOffset,
      long version,
      int entitiesOffset) {
    builder.startObject(3);
    Model.addVersion(builder, version);
    Model.addEntities(builder, entitiesOffset);
    Model.addName(builder, nameOffset);
    return Model.endModel(builder);
  }

  public static void startModel(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addVersion(FlatBufferBuilder builder, long version) { builder.addLong(1, version, 0); }
  public static void addEntities(FlatBufferBuilder builder, int entitiesOffset) { builder.addOffset(2, entitiesOffset, 0); }
  public static int createEntitiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEntitiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endModel(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishModelBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

